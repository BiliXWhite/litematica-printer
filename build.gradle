plugins {
    id("maven-publish")
    id("fabric-loom").version("1.11-SNAPSHOT").apply(false)
    id("org.ajoberstar.grgit").version("5.2.0")
    id("com.replaymod.preprocess").version("9d21b334a7")

}

preprocess {
    def mc11802 = createNode("1.18.2", 1_18_02, "mojang")
    def mc11904 = createNode("1.19.4", 1_19_04, "mojang")
    def mc12001 = createNode("1.20.1", 1_20_01, "mojang")
    def mc12002 = createNode("1.20.2", 1_20_02, "mojang")
    def mc12004 = createNode("1.20.4", 1_20_04, "mojang")
    def mc12006 = createNode("1.20.6", 1_20_06, "mojang")
    def mc12101 = createNode("1.21.1", 1_21_01, "mojang")
    def mc12104 = createNode("1.21.4", 1_21_04, "mojang")
    def mc12105 = createNode("1.21.5", 1_21_05, "mojang")
    //def mc12106 = createNode("1.21.6", 1_21_06, "mojang")

    mc11802.link(mc11904,file("versions/mapping-1.18.2-1.19.4.txt"))
    mc11904.link(mc12001, file("versions/mapping-1.19.4-1.20.1.txt"))
    mc12001.link(mc12002, file("versions/mapping-1.20.1-1.20.2.txt"))
    mc12002.link(mc12004, file("versions/mapping-1.20.2-1.20.4.txt"))
    mc12004.link(mc12006, file("versions/mapping-1.20.4-1.20.6.txt"))
    mc12006.link(mc12101, file("versions/mapping-1.20.6-1.21.1.txt"))
    mc12101.link(mc12104, file("versions/mapping-1.21.1-1.21.4.txt"))
    mc12104.link(mc12105, file("versions/mapping-1.21.4-1.21.5.txt"))
    //mc12105.link(mc12106, file("versions/mapping-1.21.5-1.21.6.txt"))

    strictExtraMappings.set(false)
}

tasks.register("cleanPreprocessSources") {
    it.group("${project.mod_id}")

    doFirst {
        subprojects {
            def path = project.projectDir.toPath().resolve("build/preprocessed")
            path.toFile().deleteDir()
        }
    }
}
def detectSystemProxy() {
    // 优先尝试通过 netsh winhttp show advproxy 获取 WinHTTP 代理
    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
        try {
            def proc = ["cmd", "/c", "netsh winhttp show advproxy"].execute()
            def output = proc.text
            def enabledMatcher = output =~ /"ProxyIsEnabled":\s*(true|false)/
            if (enabledMatcher.find()) {
                def isEnabled = enabledMatcher.group(1).toBoolean()
                if (!isEnabled) {
                    return 'disabled'
                }
            } else {
                println "[系统代理检测]未检测到 ProxyIsEnabled 字段。"
                return false
            }
            def matcher = output =~ /"Proxy":\s*"([^"]+)"/
            if (matcher.find()) {
                def proxy = matcher.group(1)
                if (proxy && proxy.contains(":")) {
                    proxy = proxy.replaceFirst(/^https?:\/\//, "")
                    def (host, port) = proxy.split(":", 2)
                    return [host: host, port: port as int]
                }
            }
        } catch (Exception e) {
            println "[系统代理检测]WinHTTP 代理检测失败: ${e.message}"
            return false
        }
    }
    return false
}

def proxy = detectSystemProxy()
if (proxy == 'disabled') {
    println "[系统代理检测]系统代理已禁用。"
} else if (proxy) {
    System.setProperty("http.proxyHost", proxy.host)
    System.setProperty("http.proxyPort", proxy.port.toString())
    System.setProperty("https.proxyHost", proxy.host)
    System.setProperty("https.proxyPort", proxy.port.toString())
    println "[系统代理检测]发现系统代理: ${proxy.host}:${proxy.port}"
} else {
    println "[系统代理检测]未检测到系统代理。"
}