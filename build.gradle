import groovy.json.JsonSlurper

plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id 'java'
}
version = project.minecraft_version+"-"+project.mod_version+"+"+ new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"))
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = 'https://masa.dy.fi/maven' }
	maven { url = "https://www.cursemaven.com" }
	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}
	maven { url = 'https://maven.fabricmc.net' }
	maven { url = "https://maven.kyrptonaught.dev"}
	maven { url = "https://maven.terraformersmc.com/releases"}
	maven { url = "https://maven.shedaniel.me/" }
	maven {
		url = "https://api.modrinth.com/maven"
	}

	maven {
		name = "jackfredReleases"
		url = uri("https://maven.jackf.red/releases")
		content {
			includeGroupAndSubgroups("red.jackf")
		}
	}
	maven {
		name = "BlameJared"
		url = uri("https://maven.blamejared.com")
		content {
			includeGroupAndSubgroups("com.blamejared.searchables")
		}
	}
	maven {
		name = "QuiltMC"
		url = uri("https://maven.quiltmc.org/repository/release")
		content {
			includeGroupAndSubgroups("org.quiltmc")
		}
	}
	maven {
		name = 'Xander Maven'
		url = 'https://maven.isxander.dev/releases'
	}
//	maven{
//		url = uri"https://maven.pkg.github.com/zhaixianyu/litematica-printer"
//	}
	//拼音搜索
	maven { url = "https://mvnrepository.com/artifact/com.belerweb/pinyin4j" }
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"


	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//masa
	modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.malilib_version}"
	modImplementation "curse.maven:litematica-${project.litematica_projectid}:${project.litematica_fileid}"
	modImplementation "curse.maven:tweakeroo-${project.tweakeroo_projectid}:${project.tweakeroo_fileid}"
	modImplementation "curse.maven:carpet-${project.carpet_projectid}:${project.carpet_fileid}"
	//quickshulker
	modImplementation ("curse.maven:quick-shulker-${project.quickshulker_projectid}:${project.quickshulker_fileid}")
	modImplementation ("net.kyrptonaught:kyrptconfig:1.5.4-1.20") { exclude group: "net.fabricmc.fabric-api" }
	modImplementation 'net.kyrptonaught:shulkerutils:1.0.4-1.19'
	//chest-tracker
//	modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
	modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}")
//	modImplementation include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}")
	modImplementation include("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")
	modImplementation ("red.jackf:whereisit:${project.where_is_it_version}")
	modImplementation include("red.jackf:chesttracker:${project.chesttracker_version}")
//	modImplementation "maven.modrinth:chest-tracker:${project.chesttracker_version}"

	modImplementation ("com.blamejared.searchables:Searchables-fabric-${project.searchables_version}")
	//test
//	modImplementation ("com.github.YingChengxi:YChengxi:1.18.2-0.0.5-2")



	//拼音搜索
	implementation include(group: 'com.belerweb', name: 'pinyin4j', version: '2.5.1')
}

processResources {
	inputs.property "version", version

	filesMatching("fabric.mod.json") {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}
var jarName
java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	archivesBaseName = project.archives_base_name
	jarName = archivesBaseName+"-"+version
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}
// configure the maven publication
publishing {
	// 发布的配置
	publications {
		// 发布的名称，可以修改为自己的命名
		maven(MavenPublication) {

			// add all the jars that should be included when publishing to maven
			// 发布的groupId
			groupId 'com.zxy'
			// 发布的artifactId
			artifactId 'litematica_printer'
			// 发布的版本号
			version version
			artifact("$buildDir/libs/${archivesBaseName}"+"-"+version+".jar"){
				classifier 'repackaged'
			}
			from components.java
			// 发布的Pom文件
			pom {
				name = 'litematica-printer'
				description = ''
				// 当前项目网站
				url = ''
				// 发布的开源协议（也可以不添加）
				licenses {
					license {
						name = 'Apache-2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				// 项目的开发者信息
				developers {
					developer {
						id = 'litematica_printer'
						name = 'litematica_printer'
						email = 'developer@example.com'
					}
				}
			}
		}
	}
	// 发布的仓库
	repositories {
//		 发布到本地 Maven 仓库，可用于在本地测试发布
		maven {
			name = 'local'
			url = uri("$buildDir/repo")
		}

		maven {
			name = 'github'
			// Github API 地址
			url = uri('https://maven.pkg.github.com/zhaixianyu/litematica-printer')
			// 认证信息，通过 Github Personal Access Token 进行认证
			credentials {
				username = project.findProperty('gpr.user') ?: System.getenv('GITHUB_ACTOR')
				password = project.findProperty('gpr.key') ?: System.getenv('GITHUB_TOKEN')
			}
		}
	}
}

task writeReleaseNotes {
	doLast {
		// 将 release notes 写到文件中
		def notes = 'RELEASE NOTES'
		file('releaseNotes.txt').write(notes)

	}
}

def releaseVersion = version // 这里使用版本号作为 release 的 tag 名称
// 发布到 Github Releases
//task createGitHubRelease(type: Exec, dependsOn: ['publish', 'writeReleaseNotes']) {
task createGitHubRelease(type: Exec) {
	if (System.getenv("GITHUB_TOKEN") == null) {
		logger.error("No GITHUB_TOKEN defined!")
		logger.error("You can define GITHUB_TOKEN in the project environment variables or run with `GITHUB_TOKEN=xxx ./gradlew task`")
		throw new StopExecutionException("No GITHUB_TOKEN defined")
	}
	def releaseUrl = "https://api.github.com/repos/zhaixianyu/litematica-printer/releases"
	def releaseNotes = new File("$project.projectDir/releaseNotes.txt").text.trim()

//	commandLine 'curl', '-H', 'Authorization: token ' + System.getenv('GITHUB_TOKEN'), '-H', 'Content-Type: application/json', '-d', "{\\\"tag_name\\\": \\\"$releaseVersion\\\",\\\"name\\\": \\\"$releaseVersion\\\",\\\"body\\\": \\\"${releaseNotes.replaceAll("\n", "\\\\n")}\\\"}", releaseUrl
	commandLine 'curl', '--insecure', '-H', 'Authorization: token ' + System.getenv('GITHUB_TOKEN'), '-H', 'Content-Type: application/json', '-d', "{\\\"tag_name\\\": \\\"$version\\\",\\\"name\\\": \\\"$version\\\",\\\"body\\\": \\\"${releaseNotes.replaceAll("\n", "\\\\n")}\\\"}", releaseUrl
}


task uploadGitHubReleaseAsset(dependsOn: ['createGitHubRelease']) {
//task uploadGitHubReleaseAsset() {
	doLast {
		if (System.getenv("GITHUB_TOKEN") == null) {
			throw new GradleException("No GITHUB_TOKEN defined")
		}
		def tagName = "$version"
		def releaseId = getReleaseIdByTag(tagName)
		if (releaseId == null) {
			println("Failed to obtain Release ID for tag: $tagName")
			return
		}
		def jarNameFixed = "${jarName}"+".jar"
		def jarPath = "$project.buildDir/libs/$jarName"+".jar"
		def jarPath1 = "$project.buildDir/libs/$jarName"+"-sources.jar"

		uploadAsset(releaseId,jarPath,jarNameFixed)
		uploadAsset(releaseId,jarPath1,"${jarName}"+"-sources.jar")
	}
}

def uploadAsset(releaseId, filePath, fileName) {
	//Windows环境下，路径中的空格会导致命令执行失败，需要对整个路径进行引号处理
	def fixedFilePath = "\"${filePath}\""
	def uploadUrl = "https://uploads.github.com/repos/zhaixianyu/litematica-printer/releases/${releaseId}/assets?name=${fileName}"
	def commandString = "curl -H \"Authorization: token ${System.getenv('GITHUB_TOKEN')}\" -H \"Content-Type: application/octet-stream\" --data-binary @${fixedFilePath} \"${uploadUrl}\""
	def output = commandString.execute().text
	println "Upload output: $output"
}

def getReleaseIdByTag(String tag) {
	def token = System.getenv('GITHUB_TOKEN')
	if (token == null) {
		throw new GradleException('No GITHUB_TOKEN defined')
	}

	def url = new URL("https://api.github.com/repos/zhaixianyu/litematica-printer/releases/tags/$tag")
	def connection = url.openConnection()
	connection.setRequestProperty('Authorization', "token $token")
//	println "==========="
	println connection
	//如果下面这行报错 通常是连不上github 请使用海克斯科技
	connection.connect()

	if (connection.responseCode == 200) {
		def jsonSlurper = new JsonSlurper()
		def response = jsonSlurper.parseText(connection.content.text)
		return response.id
	} else {
		println "Failed to fetch release id: ${connection.responseMessage}"
		return null
	}
}