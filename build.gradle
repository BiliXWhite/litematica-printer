plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = 'https://masa.dy.fi/maven' }
	maven { url = "https://www.cursemaven.com" }
	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}
	maven { url = 'https://maven.fabricmc.net' }
	maven { url = "https://maven.kyrptonaught.dev"}
	maven { url = "https://maven.terraformersmc.com/releases"}
	maven { url = "https://maven.shedaniel.me/" }
	maven {
		url = "https://api.modrinth.com/maven"
	}

	maven {
		name = "jackfredReleases"
		url = uri("https://maven.jackf.red/releases")
		content {
			includeGroupAndSubgroups("red.jackf")
		}
	}
	maven {
		name = "BlameJared"
		url = uri("https://maven.blamejared.com")
		content {
			includeGroupAndSubgroups("com.blamejared.searchables")
		}
	}
	maven {
		name = "QuiltMC"
		url = uri("https://maven.quiltmc.org/repository/release")
		content {
			includeGroupAndSubgroups("org.quiltmc")
		}
	}
	maven {
		name = 'Xander Maven'
		url = 'https://maven.isxander.dev/releases'
	}
	//拼音搜索
	maven { url = "https://mvnrepository.com/artifact/com.belerweb/pinyin4j" }
//	flatDir{
//		dirs "C:\\game\\Minecraft\\MyMod\\remote-inventory-01\\build\\libs"
//	}
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"


	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//masa
	modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.malilib_version}"
	modImplementation "curse.maven:litematica-${project.litematica_projectid}:${project.litematica_fileid}"
	modImplementation "curse.maven:tweakeroo-${project.tweakeroo_projectid}:${project.tweakeroo_fileid}"
	modImplementation "curse.maven:carpet-${project.carpet_projectid}:${project.carpet_fileid}"
	//quickshulker
	modImplementation ("curse.maven:quick-shulker-${project.quickshulker_projectid}:${project.quickshulker_fileid}")
	modImplementation ("net.kyrptonaught:kyrptconfig:1.5.4-1.20") { exclude group: "net.fabricmc.fabric-api" }
	modImplementation 'net.kyrptonaught:shulkerutils:1.0.4-1.19'
	//chest-tracker
//	modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
	modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}")
//	modImplementation include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}")
	modImplementation include("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")
	modImplementation ("red.jackf:whereisit:${project.where_is_it_version}")
	modImplementation include("red.jackf:chesttracker:${project.chesttracker_version}")
//	modImplementation "maven.modrinth:chest-tracker:${project.chesttracker_version}"

	modImplementation ("com.blamejared.searchables:Searchables-fabric-${project.searchables_version}")

//	modImplementation ("C:\\game\\Minecraft\\MyMod\\remote-inventory-01\\build\\libs\\remote-inventory-1.20.2-1.2.jar")
//	modImplementation include("libs:remote-inventory:1.20.2-1.2")

	//拼音搜索
	implementation include(group: 'com.belerweb', name: 'pinyin4j', version: '2.5.1')
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	// 不能带中文 可恶啊
//	archivesBaseName = "[投影打印机_宅闲鱼二改版]"+project.archives_base_name+new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"))
	archivesBaseName = project.archives_base_name+"-"+ project.minecraft_version +"-"+new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"))
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}
// configure the maven publication
publishing {
	// 发布的配置
	publications {
		// 发布的名称，可以修改为自己的命名
		maven(MavenPublication) {
			from components.java

			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			// 发布的groupId
//			groupId 'com.zxy'
//			// 发布的artifactId
//			artifactId 'litematica_printer'
//			// 发布的版本号
//			version project.mod_version
//
//			artifact("$buildDir/libs/${archivesBaseName}"+"-"+project.mod_version+".jar"){
//				classifier 'repackaged'
//			}
//
//			// 发布的Pom文件
//			pom {
//				name = 'litematica_printer'
//				description = ''
//				// 当前项目网站
//				url = 'https://example.com'
//				// 发布的开源协议（也可以不添加）
//				licenses {
//					license {
//						name = 'Apache-2.0'
//						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//					}
//				}
//				// 项目的开发者信息
//				developers {
//					developer {
//						id = 'litematica_printer'
//						name = 'litematica_printer'
//						email = 'developer@example.com'
//					}
//				}
//			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
//	repositories {
//		// Add repositories to publish to here.
//		// Notice: This block does NOT have the same function as the block in the top level.
//		// The repositories here will be used for publishing your artifact, not for
//		// retrieving dependencies.
//	}

	// 发布的仓库
	repositories {
		// 发布到本地 Maven 仓库，可用于在本地测试发布
//		maven {
//			name = 'local'
//			url = uri("$buildDir/repo")
//		}
//		// 发布到 Github Releases
//		maven {
//			name = 'github'
//			// Github API 地址
//			url = uri('https://maven.pkg.github.com/zhaixianyu/litematica-printer')
//			// 认证信息，通过 Github Personal Access Token 进行认证
//			credentials {
//				username = project.findProperty('gpr.user') ?: System.getenv('GITHUB_ACTOR')
//				password = project.findProperty('gpr.key') ?: System.getenv('GITHUB_TOKEN')
//			}
//		}
	}
}