import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

plugins {
    id("java-library")
    id("maven-publish")
    id("com.github.breadmoirai.github-release").version('2.4.1')
}
def time = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"))

group(project.mod_maven_group)
version(project.mod_version+"+"+time)

base {
    archivesName.set("${project.mod_archives_base_name}-all")
}

def fabric_subprojects = project.parent.subprojects.findAll({
    it.name != "fabricWrapper"
})

fabric_subprojects.collect {
    evaluationDependsOn(":${it.name}")
}

jar {
    // disable cache
    outputs.upToDateWhen { false }

    dependsOn(fabric_subprojects.collect {
        it.tasks.remapJar
    })

    doFirst {
        delete fileTree("build/tmp/submods/META-INF/jars")

        copy {
            from {
                fabric_subprojects.collect {
                    it.remapJar.outputs.files
                }
            }

            into("build/tmp/submods/META-INF/jars")
        }
    }

    from("${rootDir}/LICENSE")
    from("build/tmp/submods")
}

processResources {
    // disable cache
    outputs.upToDateWhen { false }

    from("${rootDir}/icon.png") {
        into("assets/${project.mod_id}")
    }

    filesMatching("fabric.mod.json") {
        expand([
                "mod_description"     : project.mod_description,
                "mod_homepage"        : project.mod_homepage,
                "mod_id"              : project.mod_id,
                "mod_license"         : project.mod_license,
                "mod_name"            : project.mod_name,
                "mod_version"         : project.version,
                "mod_sources"         : project.mod_sources
        ])
    }

    doLast {
        ArrayList<?> mc_condition = []
        ArrayList<?> jars = []

        fabric_subprojects.each({
            mc_condition.add("${it.minecraft_dependency}")
            jars.add(["file": "META-INF/jars/${project.mod_archives_base_name}-${it.minecraft_version}-${project.version}.jar"])
        })

        File file = file("build/resources/main/fabric.mod.json")
        JsonSlurper slurper = new JsonSlurper()
        JsonBuilder builder = new JsonBuilder(slurper.parse(file))
        builder.content.depends.minecraft = mc_condition
        builder.content.jars = jars
        BufferedWriter writer = file.newWriter()
        writer.append(builder.toPrettyString())
        writer.flush()
        writer.close()
    }
}

java {
    sourceCompatibility(JavaVersion.VERSION_1_8)
    targetCompatibility(JavaVersion.VERSION_1_8)
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            groupId("${project.mod_maven_group}")
            artifactId("${project.mod_id}")
//            version("${rootProject.getMavenArtifactVersion()}")
            version("all-" + version)
            from(components.java)
        }
    }

    repositories {
        mavenLocal()

        maven {
            url("$rootDir/publish")
        }
    }


}

githubRelease {
    token = System.getenv("GITHUB_RELEASES_TOKEN")                          // GitHub PAT
    owner = "zhaixianyu"                                                    // GitHub 用户名或组织名
    repo = project.mod_id                                                   // 仓库名称
    tagName = project.version                                               // 使用 Mod 版本作为 Git 标签
    targetCommitish = "litematica-printer2.4-Revision-1.0"                  // 目标分支
    releaseName = "v${project.version}"                                     // 发布名称
    body = ""                                                               // 发布说明
    draft = false                                                           // 是否存为草稿
    prerelease = false                                                      // 是否为预发布版

    def buildLibsDir = project.layout.buildDirectory.dir("libs").get().asFile
    def jarFile = buildLibsDir.listFiles().find { file ->
        file.name.endsWith(".jar") && file.name.contains(time)
    }
    releaseAssets = [
            jarFile
    ]
}

