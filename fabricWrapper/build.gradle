import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

plugins {
    id("java-library")
    id("maven-publish")
}
def time = new Date().format("yyMMdd", TimeZone.getTimeZone("GMT+08:00"))

group(project.mod_maven_group)
version(project.mod_version+"+"+time)

base {
    archivesName.set("${project.mod_archives_base_name}-all")
}

def fabric_subprojects = project.parent.subprojects.findAll({
    it.name != "fabricWrapper"
})

fabric_subprojects.collect {
    evaluationDependsOn(":${it.name}")
}

tasks.register('collectSubModules') {
    // 禁用缓存
    outputs.upToDateWhen { false }

    // 依赖所有子项目的 remapJar 任务
    dependsOn(fabric_subprojects.collect {
        it.tasks.remapJar
    })

    doFirst {
        // 清理旧的子模块目录
        delete fileTree("build/tmp/submods/META-INF/jars")

        // 复制所有重映射后的 JAR 文件
        copy {
            from {
                fabric_subprojects.collect {
                    it.remapJar.outputs.files
                }
            }
            into("build/tmp/submods/META-INF/jars")
        }
    }
}

jar {
    // 禁用缓存
    outputs.upToDateWhen { false }

    // 依赖子模块收集任务
    dependsOn collectSubModules

    from("${rootDir}/LICENSE")
    from("build/tmp/submods")
}

processResources {
    // disable cache
    outputs.upToDateWhen { false }

    from("${rootDir}/icon.png") {
        into("assets/${project.mod_id}")
    }

    filesMatching("fabric.mod.json") {
        expand([
                "mod_description"     : project.mod_description,
                "mod_homepage"        : project.mod_homepage,
                "mod_id"              : project.mod_id,
                "mod_license"         : project.mod_license,
                "mod_name"            : project.mod_name,
                "mod_version"         : project.version,
                "mod_sources"         : project.mod_sources
        ])
    }

    doLast {
        ArrayList<?> mc_condition = []
        ArrayList<?> jars = []

        fabric_subprojects.each({
            mc_condition.add("${it.minecraft_dependency}")
            jars.add(["file": "META-INF/jars/${project.mod_archives_base_name}-${it.minecraft_version}-${project.version}.jar"])
        })

        File file = file("build/resources/main/fabric.mod.json")
        JsonSlurper slurper = new JsonSlurper()
        JsonBuilder builder = new JsonBuilder(slurper.parse(file))
        builder.content.depends.minecraft = mc_condition
        builder.content.jars = jars
        BufferedWriter writer = file.newWriter()
        writer.append(builder.toPrettyString())
        writer.flush()
        writer.close()
    }
}

java {
    sourceCompatibility(JavaVersion.VERSION_1_8)
    targetCompatibility(JavaVersion.VERSION_1_8)
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            artifactId("${project.mod_id}")
            version("${rootProject.getMavenArtifactVersion()}")
            from(components.java)
        }
    }

    repositories {
        mavenLocal()

        maven {
            url("$rootDir/publish")
        }
    }
}
